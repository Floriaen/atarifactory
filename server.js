const express = require('express');
const cors = require('cors');
const path = require('path');
const fs = require('fs');
const { v4: uuidv4 } = require('uuid');

const app = express();
const PORT = process.env.PORT || 3001;

app.use(cors());
app.use(express.json());
app.use('/public', express.static(path.join(__dirname, 'public')));

// Dummy in-memory games list for MVP skeleton
global.gamesManifest = [];

const GAMES_DIR = path.join(__dirname, 'games');
const DUMMY_THUMB = '/public/dummy-thumb.png';

// Ensure /games/ directory exists
if (!fs.existsSync(GAMES_DIR)) {
  fs.mkdirSync(GAMES_DIR);
}

// --- Agent Stubs ---
function GameDesignerAgent() {
  return { title: 'Stub Game', description: 'A game generated by stubs', genre: 'arcade' };
}
function MechanicSynthesizerAgent(gameSpec) {
  return { mechanics: ['move', 'jump'], winCondition: 'score > 10' };
}
function AssetGeneratorAgent(gameSpec, mechanicsBlock) {
  return { sprites: [], sounds: [] }; // Empty for stub
}
function GameBuilderAgent(gameId, gameSpec, mechanicsBlock, assets) {
  // Minimal Phaser 3 game: bouncing ball
  const phaserCdn = 'https://cdn.jsdelivr.net/npm/phaser@3.70.0/dist/phaser.js';
  return {
    'index.html': `<!DOCTYPE html>
<html lang='en'>
<head>
  <meta charset='utf-8'>
  <title>${gameSpec.title}</title>
  <meta name='viewport' content='width=device-width,initial-scale=1.0,user-scalable=no'>
  <style>body{margin:0;background:#181818;}#game-container{width:100vw;height:100vh;overflow:hidden;}</style>
</head>
<body>
  <div id='game-container'></div>
  <script src='${phaserCdn}'></script>
  <script src='/games/${gameId}/assets/game.js'></script>
</body>
</html>`,
    'assets/game.js': `const config = {
  type: Phaser.AUTO,
  parent: 'game-container',
  width: window.innerWidth,
  height: window.innerHeight,
  backgroundColor: '#222',
  physics: { default: 'arcade', arcade: { gravity: { y: 0 }, debug: false } },
  scene: { preload, create, update }
};
let ball, cursors, velocity = {x:200, y:180};
function preload() {
  this.load.image('ball', 'https://upload.wikimedia.org/wikipedia/commons/7/7a/Basketball.png');
}
function create() {
  const w = this.sys.game.config.width;
  const h = this.sys.game.config.height;
  ball = this.physics.add.image(w/2, h/2, 'ball').setDisplaySize(64,64).setCollideWorldBounds(true).setBounce(1);
  ball.body.setVelocity(velocity.x, velocity.y);
  // Touch input: tap to change direction
  this.input.on('pointerdown', function (pointer) {
    ball.body.setVelocity(-ball.body.velocity.x, -ball.body.velocity.y);
  });
}
function update() {
  // nothing needed, ball bounces
}
window.addEventListener('resize', () => {
  const game = Phaser.GAMES[0];
  if (game) game.scale.resize(window.innerWidth, window.innerHeight);
});
new Phaser.Game(config);
`
  };
}
function StaticValidatorAgent(gameFiles) {
  return { valid: true, errors: [] };
}
function SaveAgent(gameId, gameSpec, mechanicsBlock, assets, gameFiles) {
  const gameFolder = path.join(GAMES_DIR, gameId);
  if (!fs.existsSync(gameFolder)) fs.mkdirSync(gameFolder);
  // Save gameSpec
  fs.writeFileSync(path.join(gameFolder, 'game.json'), JSON.stringify({ gameSpec, mechanicsBlock, assets }, null, 2));
  // Save files (handle assets subfolder)
  for (const [fname, content] of Object.entries(gameFiles)) {
    const outPath = path.join(gameFolder, fname);
    const outDir = path.dirname(outPath);
    if (!fs.existsSync(outDir)) fs.mkdirSync(outDir, { recursive: true });
    fs.writeFileSync(outPath, content);
  }
  // Save a dummy thumbnail (just reference for now)
  return { thumbnail: DUMMY_THUMB };
}

// POST /generate - stub pipeline
app.post('/generate', (req, res) => {
  const id = uuidv4();
  // Pipeline
  const gameSpec = GameDesignerAgent();
  const mechanicsBlock = MechanicSynthesizerAgent(gameSpec);
  const assets = AssetGeneratorAgent(gameSpec, mechanicsBlock);
  const gameFiles = GameBuilderAgent(id, gameSpec, mechanicsBlock, assets);
  const validation = StaticValidatorAgent(gameFiles);
  const { thumbnail } = SaveAgent(id, gameSpec, mechanicsBlock, assets, gameFiles);
  // Add to manifest
  const newGame = {
    id,
    name: gameSpec.title,
    date: new Date().toISOString(),
    thumbnail,
  };
  global.gamesManifest.push(newGame);
  res.json({ success: true, game: newGame });
});

// GET /games - list all games
app.get('/games', (req, res) => {
  res.json(global.gamesManifest);
});

// Log all /games/* requests for debugging
app.use('/games', (req, res, next) => {
  console.log(`[DEBUG] Incoming /games request: ${req.method} ${req.originalUrl}`);
  next();
});

// Serve any asset inside a game's directory (e.g. /games/:id/assets/game.js)
app.get('/games/:id/assets/:filename', (req, res) => {
  const gameId = req.params.id;
  const filename = req.params.filename;
  const gameFolder = path.join(GAMES_DIR, gameId, 'assets');
  const filePath = path.join(gameFolder, filename);
  if (fs.existsSync(filePath)) {
    console.log(`[ASSET] Serving /games/${gameId}/assets/${filename}`);
    res.sendFile(filePath);
  } else {
    console.log(`[ASSET] NOT FOUND: /games/${gameId}/assets/${filename}`);
    res.status(404).send('File not found');
  }
});

// GET /games/:id - serve generated game
app.get('/games/:id', (req, res) => {
  const gameId = req.params.id;
  const gameFolder = path.join(GAMES_DIR, gameId);
  const indexPath = path.join(gameFolder, 'index.html');
  if (fs.existsSync(indexPath)) {
    console.log(`[GAME] Serving /games/${gameId}/index.html`);
    res.sendFile(indexPath);
  } else {
    console.log(`[GAME] NOT FOUND: /games/${gameId}/index.html`);
    res.status(404).send('Game not found');
  }
});

app.get('/cors-test', (req, res) => {
  res.json({ message: 'CORS test OK' });
});

app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
}); 